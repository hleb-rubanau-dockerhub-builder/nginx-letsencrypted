#!/bin/bash

set -e 
set -o pipefail

source /usr/local/share/helper_functions.sh

export SSL_CERT_MODE='snakeoil'
source $(dirname $BASH_SOURCE[0])/determine_cert_paths

PRIMARY_DOMAIN=$1
shift
# reformat remaining arguments list into comma-separated with DNS: prefix
REQUESTED_DOMAINS_LIST="$*"
DOMAINS_LIST=""
for domain in $REQUESTED_DOMAINS_LIST ; do DOMAINS_LIST="$DOMAINS_LIST -d $domain" ; done

require_vars PRIMARY_DOMAIN LE_EMAIL
export CERTBOT_FLAGS="$( get_certbot_flags.sh ) --cert-name $CERT_NAME --expand"
       
# we assume nginx is NOT running, and may want to run it in a special mode
if [ "$SSL_CERT_STATUS" = "missing" ]; then 
    tweak_nginx_configs enforce_webroot_only_mode
fi    

# TODO: survive if nginx is already running
say "Running nginx in background"
nginx

say "Calling certbot"
certbot certonly $CERTBOT_FLAGS \
    --agree-tos -m $LE_EMAIL \
    --webroot -w $CERTBOT_WEBROOT \
    $DOMAINS_LIST   \
|| CERTBOT_FAILED="yes"
    
if [ "$CERTBOT_FAILED" == "yes" ]; then
    msg="Generation failed for $LE_DOMAINS"
    say "ERROR: $msg"
    echo "[$(date +%F-%T)] FAILURE (mode=$CERT_MODE, domains: $LE_DOMAINS )" >> $LETSENCRYPT_FAILURE_LOG_FILE
fi

tweak_nginx enable_certs_mode
	
say "Stopping nginx"
kill -TERM $(cat /var/run/nginx.pid) 
#nginx -s stop
while [ -f /var/run/nginx.pid ]; do
  say "Waiting for nginx to shut down"
  sleep 2;
done

say "Nginx stopped"

if [ "$CERTBOT_FAILED" == "yes" ]; then die "Letsencrypt generation failed" ; fi
